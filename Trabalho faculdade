import os
import smtplib
import time
import schedule
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email import encoders

def send_email_with_attachment(sender_email, sender_password, recipient_email, subject, body, attachment_path):
    # Cria o email
    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = recipient_email
    msg['Subject'] = subject

    # Corpo do email
    msg.attach(MIMEText(body, 'plain'))

    # Abre o anexo
    with open(attachment_path, "rb") as attachment:
        part = MIMEBase("application", "octet-stream")
        part.set_payload(attachment.read())
        
    encoders.encode_base64(part)

    # Adiciona o anexo ao email
    part.add_header(
        "Content-Disposition",
        f"attachment; filename= {os.path.basename(attachment_path)}",
    )

    msg.attach(part)
    text = msg.as_string()

    # Login e envio do email
    with smtplib.SMTP('smtp.gmail.com', 587) as server:
        server.starttls()  # Conexão segura
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, recipient_email, text)

    print(f"Email enviado para {recipient_email} com anexo {attachment_path}")

def job():
    folder_path = r'C:\\Users\\usuario\Desktop\\script\\teste'
    excel_file = 'Lista de reajentes laboratorios ditadicos.xlsx'
    attachment_path = os.path.join(folder_path, excel_file)

    # Detalhes do email
    sender_email = 'bio.diadatico@xerem.ufrj.br'
    # Utilize a senha de aplicativo gerada pelo Google
    sender_password = 'srtc zfuu pcqx vbay'
    recipient_email = 'professores@xerem.ufrj.br'
    subject = 'Assunto teste'
    body = 'relatorio semanal de reajentes laboratorios didaticos'

    # Envia o email
    send_email_with_attachment(sender_email, sender_password, recipient_email, subject, body, attachment_path)

# Envia o email imediatamente
job()

# Agenda o envio do email todos os dias às 7:00 AM
schedule.every().week.at("07:00").do(job)

while True:
    schedule.run_pending()
    time.sleep(1)
